#!/bin/bash

###
# Generated by Chef for [<%= node[:fqdn] %>]
# Environment: <%= node.chef_environment %>
###

set -o pipefail

ulimit -n 16000

declare RET=1
declare MONGO="<%= @base %>/current/bin/mongo"
declare MONGODUMP="<%= @base %>/current/bin/mongodump"
declare SSH="/usr/bin/ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <%= @base %>/tools/backup_rsa -l <%= @backup_user %> -p <%= @backup_port %> <%= @backup_host %>"

function finish {
  if [ "$RET" -ne 0 ]; then
    /bin/touch /tmp/mongodb-backup-<%= @port %>-failed
  else
    /bin/rm -f /tmp/mongodb-backup-<%= @port %>-failed
  fi
}
trap finish EXIT

declare ISMASTER=0

ISMASTER=$($MONGO --quiet --eval "db.isMaster().ismaster")

if [ "$ISMASTER" != "true" ]; then
  echo "$(date) Not master! Exiting."
  RET=0
  exit 0
fi

echo "$(date) Starting mongodb backup"

# create destination directory.
if ! $SSH "mkdir -p <%= @backup_path %>/$(hostname -f)"; then
  echo "$(date) Cannot create remote directory!"
  exit 1
fi

# do the mongodb
declare BACKUP_FILE=""
BACKUP_FILE="$(hostname -f)/$(hostname -f).$(date +%Y%m%d-%H%M%S).archive.gz"
if [ -x "$MONGODUMP" ]; then
  if ! $MONGODUMP --archive --oplog --port <%= @port %> | pigz -9 -p <%= (node["cpu"]["total"]/2.to_f).ceil %> | $SSH "cat - > <%= @backup_path %>/$BACKUP_FILE.inprogress"; then
    echo "$(date) Backup failed!"
    exit 1
  fi

  if ! $SSH "mv <%= @backup_path %>/$BACKUP_FILE.inprogress <%= @backup_path %>/$BACKUP_FILE"; then
    echo "$(date) Cannot rename inprogress file!"
    exit 1
  fi
else
  echo "$(date) mongodump not found!"
  exit 1
fi

# update backup index
if ! $SSH "echo $BACKUP_FILE >> <%= @backup_path %>/<%= @name %>.index"; then
  echo "$(date) Backup index update failed!"
  exit 1
fi

RET=0
echo "$(date) Finished mongodb backup"
